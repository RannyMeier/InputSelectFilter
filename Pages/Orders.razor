@page "/orders"
@inject EntSelService SelectService
<h3>Orders</h3>
@if (itms == null)
{
    <p><em>Loading...</em></p>
}
else
{
<EditForm Model="orders">
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Id</th>
                <th>DocNum</th>
                <th>Date</th>
                <th>Entity</th>
                <th>Item</th>
                <th>Amount</th>
            </tr>
        </thead>
        <tbody>
            @foreach (Order o in orders)
            {
            <tr>
                <td>@o.Id</td>
                <td><InputText @bind-Value="o.DocNum" /></td>
                <td><InputDate @bind-Value="o.Date" @bind-Value:format="MM yyyy dd" /></td>
                <td>
                    <RadzenDropDown TValue="Int32" AllowVirtualization="true" AllowFiltering="true" Data="@ents" @bind-Value="o.EntId"
                                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.Contains"
                                    TextProperty="Name" ValueProperty="Id" 
                                    Change=@(args => OnChange(o))/>
                </td>
                <td>@o.ItmId</td>
                <td><InputNumber @bind-Value="o.Amount" @bind-Value:format="#,##0.00;(#,##0.00)" /></td>
            </tr>
            }
        </tbody>
    </table>
    <p>@message</p>
</EditForm>
}


@code {
    private List<EntSel> ents;
    private List<EntSel> itms;
    private List<Order> orders;
    private string message;
    protected override async Task OnInitializedAsync()
    {
        ents = await SelectService.GetEntsAsync();
        itms = await SelectService.GetItmsAsync();
        orders = SelectService.GetOrders();
    }

    void OnChange(Order order)
    {
        message = String.Format("Id {0}, DocNum {1}, EntId {2}", order.Id, order.DocNum, order.EntId);
    }
}
